image: gradle:6.4-jre14

cache:
  key: '$CI_COMMIT_REF_NAME'
  paths:
    - .gradle/

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: '/certs'

stages:
  - check
  - build
  - test
  - analyze
  - package
  - release
  - deploy

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

nohttp:
  stage: check
  script:
    - ./gradlew checkstyleNohttp --no-daemon

gradle-compile:
  stage: build
  script:
    - ./gradlew compileJava --no-daemon
  artifacts:
    paths:
      - build/classes/
      - build/generated/
    expire_in: 1 day
  needs: []

frontend-compile:
  stage: build
  before_script:
    - export NG_CLI_ANALYTICS="false"
    - ./gradlew npm_install -PnodeInstall --no-daemon
  script:
    - ./gradlew webpack -PnodeInstall --no-daemon
  needs: []

gradle-test:
  stage: test
  script:
    - ./gradlew test --no-daemon
  artifacts:
    reports:
      junit: build/test-results/test/TEST-*.xml
    paths:
      - build/test-results/
      - build/jacoco/
    expire_in: 1 day

gradle-integration-test:
  # DinD service is required for Testcontainers
  services:
    - docker:dind
  variables:
    # Instruct Testcontainers to use the daemon of DinD.
    DOCKER_HOST: 'tcp://docker:2375'
  stage: test
  script:
    - ./gradlew integrationTest --no-daemon -Ptestcontainers
  artifacts:
    reports:
      junit: build/test-results/integrationTest/TEST-*.xml
    paths:
      - build/test-results/
      - build/jacoco/
    expire_in: 1 day

frontend-test:
  stage: test
  before_script:
    - export NG_CLI_ANALYTICS="false"
    - ./gradlew npm_install -PnodeInstall --no-daemon
  script:
    - ./gradlew npm_run_test -PnodeInstall --no-daemon
  artifacts:
    reports:
      junit: build/test-results/TESTS-results-jest.xml
    paths:
      - build/test-results/
      - build/jacoco/
    expire_in: 1 day

sonar-analyze:
  stage: analyze
  except:
    - merge_requests
  dependencies:
    - gradle-test
    - gradle-integration-test
    - frontend-test
  before_script:
    - export NG_CLI_ANALYTICS="false"
    - ./gradlew npm_install -PnodeInstall --no-daemon
  script:
    - ./gradlew sonarqube --no-daemon -Dsonar.projectKey=autocut -Dsonar.host.url=https://www.farue.rwth-aachen.de/sonar -Dsonar.login=$SONAR_TOKEN
  allow_failure: true

gradle-package:
  stage: package
  before_script:
    - export NG_CLI_ANALYTICS="false"
    - ./gradlew npm_install -PnodeInstall --no-daemon
  script:
    - ./gradlew bootJar -Pprod -x check --no-daemon
  artifacts:
    paths:
      - build/libs/*.jar
      - build/classes
    expire_in: 1 day
  only:
    refs:
      - release

docker-push:
  stage: release
  variables:
    REGISTRY_URL: registry.git.rwth-aachen.de
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA
  dependencies:
    - gradle-package
  script:
    - ./gradlew jib -Pprod -Djib.to.image=$IMAGE_TAG -Djib.to.auth.username=gitlab-ci-token  -Djib.to.auth.password=$CI_BUILD_TOKEN
  only:
    refs:
      - release

docker-deploy:
  image: alpine
  stage: deploy
  script:
    - apk add openssh
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - scp ${SSH_OPTS} ${DOCKER_COMPOSE_APP} gitlab@${SERVER_URL}:${REMOTE_DOCKER_COMPOSE_APP}
    - scp ${SSH_OPTS} ${DOCKER_COMPOSE_MYSQL} gitlab@${SERVER_URL}:${REMOTE_DOCKER_COMPOSE_MYSQL}
    - ssh ${SSH_OPTS} gitlab@${SERVER_URL} "docker login -u ${CI_DEPLOY_USER} -p ${CI_DEPLOY_PASSWORD} ${CI_REGISTRY}
      && cd ~/autocut
      && docker-compose -f app.yml pull
      && docker-compose -f app.yml up -d"
  only:
    refs:
      - release
