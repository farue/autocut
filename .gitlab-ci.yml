image: gradle:6.8-jre15

cache:
  key: '$CI_COMMIT_REF_SLUG'
  paths:
    - .gradle/

variables:
  # Docker
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: '/certs'
  DOCKER_TLS_VERIFY: '1'
  DOCKER_CERT_PATH: '/certs/client'
  # Deployment
  SERVER_URL: '137.226.153.2'
  SSH_OPTS: '-o StrictHostKeyChecking=no'
  DOCKER_COMPOSE_APP: 'src/main/docker/autocut.yml'
  REMOTE_DOCKER_COMPOSE_APP: '~/autocut/autocut.yml'

stages:
  - check
  - build
  - test
  - analyze
  - package
  - release
  - deploy

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

nohttp:
  stage: check
  script:
    - gradle checkstyleNohttp

gradle-compile:
  stage: build
  script:
    - gradle compileJava -x webapp
  artifacts:
    paths:
      - build/
    expire_in: 1 day
  needs: []

frontend-compile:
  stage: build
  before_script:
    - export NG_CLI_ANALYTICS="false"
    - gradle npmSetup -PnodeInstall
  script:
    - gradle webapp -PnodeInstall
  cache:
    key: 'frontend-$CI_COMMIT_REF_SLUG'
    paths:
      - .gradle/
      - node_modules/
  artifacts:
    paths:
      - build/
    expire_in: 1 day
  needs: []

gradle-test:
  stage: test
  script:
    - gradle test -x webapp
  artifacts:
    reports:
      junit: build/test-results/test/TEST-*.xml
    paths:
      - build/test-results/
      - build/jacoco/
    expire_in: 1 day
  needs:
    - gradle-compile
  dependencies:
    - gradle-compile

gradle-integration-test:
  # DinD service is required for Testcontainers
  services:
    - docker:dind
  variables:
    # Instruct Testcontainers to use the daemon of DinD.
    DOCKER_HOST: 'tcp://docker:2376'
  stage: test
  script:
    - gradle integrationTest -Ptestcontainers -x webapp
  artifacts:
    reports:
      junit: build/test-results/integrationTest/TEST-*.xml
    paths:
      - build/test-results/
      - build/jacoco/
    expire_in: 1 day
  needs:
    - gradle-compile
  dependencies:
    - gradle-compile

frontend-test:
  stage: test
  before_script:
    - export NG_CLI_ANALYTICS="false"
    - gradle npmSetup -PnodeInstall
  script:
    - gradle npm_run_test -PnodeInstall
  cache:
    key: 'frontend-$CI_COMMIT_REF_SLUG'
    paths:
      - .gradle/
      - node_modules/
  artifacts:
    reports:
      junit: build/test-results/TESTS-results-jest.xml
    paths:
      - build/test-results/
      - build/jacoco/
    expire_in: 1 day
  needs:
    - frontend-compile
  dependencies:
    - frontend-compile

.sonar-analyze:
  stage: analyze
  except:
    - merge_requests
  dependencies:
    - gradle-compile
    - frontend-compile
    - gradle-test
    - gradle-integration-test
    - frontend-test
  before_script:
    - export NG_CLI_ANALYTICS="false"
    - gradle npm_install -PnodeInstall
  script:
    - gradle sonarqube -x test -Dsonar.projectKey=autocut -Dsonar.host.url=https://www.farue.rwth-aachen.de/sonar -Dsonar.login=$SONAR_TOKEN
  allow_failure: true

gradle-package:
  stage: package
  before_script:
    - export NG_CLI_ANALYTICS="false"
    - gradle npm_install -PnodeInstall
  script:
    - gradle bootJar -PnodeInstall -Pprod -x check
  artifacts:
    paths:
      - build/
    expire_in: 1 day
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

docker-push:
  stage: release
  resource_group: deploy
  dependencies:
    - gradle-package
  script:
    # -x webapp relies on this job getting the build artifacts from gradle-package
    # alternatively we could add -PnodeInstall
    - gradle jib -Pprod -x webapp -Djib.to.image=$CI_REGISTRY_IMAGE -Djib.to.tags=$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA -Djib.to.auth.username=gitlab-ci-token -Djib.to.auth.password=$CI_BUILD_TOKEN -Djib.httpTimeout=120000
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

docker-deploy:
  image: alpine
  stage: deploy
  resource_group: deploy
  dependencies: []
  environment:
    name: production
    url: https://www.farue.rwth-aachen.de
  script:
    - apk add openssh
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - scp ${SSH_OPTS} ${DOCKER_COMPOSE_APP} gitlab@${SERVER_URL}:${REMOTE_DOCKER_COMPOSE_APP}
    - ssh ${SSH_OPTS} gitlab@${SERVER_URL} "
      export JASYPT_ENCRYPTOR_PASSWORD=${JASYPT_ENCRYPTOR_PASSWORD}
      && docker login -u ${CI_DEPLOY_USER} -p ${CI_DEPLOY_PASSWORD} ${CI_REGISTRY}
      && cd ~/autocut
      && docker-compose -f autocut.yml pull
      && docker-compose -f autocut.yml up -d"
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
