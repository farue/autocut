variables:
  SERVER_URL: '137.226.153.2'
  SSH_OPTS: '-o StrictHostKeyChecking=no'
  DOCKER_COMPOSE_APP: 'src/main/docker/app.yml'
  DOCKER_COMPOSE_MYSQL: 'src/main/docker/mysql.yml'
  REMOTE_DOCKER_COMPOSE_APP: '~/autocut/app.yml'
  REMOTE_DOCKER_COMPOSE_MYSQL: '~/autocut/mysql.yml'

image: jhipster/jhipster:v6.6.0

cache:
  key: '$CI_COMMIT_REF_NAME'
  paths:
    - .maven/
stages:
  - check
  - build
  - test
  - analyze
  - package
  - release
  - deploy

before_script:
  - export NG_CLI_ANALYTICS="false"
  - export MAVEN_USER_HOME=`pwd`/.maven
  - ./mvnw -ntp com.github.eirslett:frontend-maven-plugin:install-node-and-npm -DnodeVersion=v12.13.1 -DnpmVersion=6.13.4 -Dmaven.repo.local=$MAVEN_USER_HOME
  - ./mvnw -ntp com.github.eirslett:frontend-maven-plugin:npm -Dmaven.repo.local=$MAVEN_USER_HOME

nohttp:
  stage: check
  script:
    - ./mvnw -ntp checkstyle:check -Dmaven.repo.local=$MAVEN_USER_HOME

maven-compile:
  stage: build
  script:
    - ./mvnw -ntp compile -Dmaven.repo.local=$MAVEN_USER_HOME
  artifacts:
    paths:
      - target/classes/
      - target/generated-sources/
    expire_in: 1 day

maven-test:
  stage: test
  script:
    - ./mvnw -ntp verify -Dmaven.repo.local=$MAVEN_USER_HOME
  artifacts:
    reports:
      junit: target/test-results/**/TEST-*.xml
    paths:
      - target/test-results
      - target/jacoco
    expire_in: 1 day

frontend-test:
  stage: test
  script:
    - ./mvnw -ntp com.github.eirslett:frontend-maven-plugin:npm -Dfrontend.npm.arguments='run test' -Dmaven.repo.local=$MAVEN_USER_HOME
  artifacts:
    reports:
      junit: target/test-results/TESTS-results-jest.xml
    paths:
      - target/test-results
      - target/jacoco
    expire_in: 1 day
sonar-analyze:
  stage: analyze
  dependencies:
    - maven-test
    - frontend-test
  script:
    - ./mvnw -ntp compile -Dmaven.repo.local=$MAVEN_USER_HOME
    - ./mvnw -ntp org.jacoco:jacoco-maven-plugin:prepare-agent initialize sonar:sonar -Dsonar.organization="Farue RWTH" -Dsonar.host.url=http://localhost:9001 -Dsonar.login=$SONAR_TOKEN -Dmaven.repo.local=$MAVEN_USER_HOME
  allow_failure: true

maven-package:
  stage: package
  script:
    - ./mvnw -ntp verify -Pprod -DskipTests -Dmaven.repo.local=$MAVEN_USER_HOME
  artifacts:
    paths:
      - target/*.jar
      - target/classes
    expire_in: 1 day
  only:
    refs:
      - release

docker-push:
  stage: release
  variables:
    REGISTRY_URL: registry.git.rwth-aachen.de
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA
  dependencies:
    - maven-package
  script:
    - ./mvnw -ntp compile jib:build -Pprod -Djib.to.image=$IMAGE_TAG -Djib.to.auth.username=gitlab-ci-token  -Djib.to.auth.password=$CI_BUILD_TOKEN -Dmaven.repo.local=$MAVEN_USER_HOME
  only:
    refs:
      - release

docker-deploy:
  stage: deploy
  script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - scp ${SSH_OPTS} ${DOCKER_COMPOSE_APP} gitlab@${SERVER_URL}:${REMOTE_DOCKER_COMPOSE_APP}
    - scp ${SSH_OPTS} ${DOCKER_COMPOSE_MYSQL} gitlab@${SERVER_URL}:${REMOTE_DOCKER_COMPOSE_MYSQL}
    - ssh ${SSH_OPTS} gitlab@${SERVER_URL} "docker login -u ${CI_DEPLOY_USER} -p ${CI_DEPLOY_PASSWORD} ${CI_REGISTRY}
      && cd ~/autocut
      && docker-compose -f app.yml pull
      && docker-compose -f app.yml up -d"
  only:
    refs:
      - release
